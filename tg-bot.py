import logging
import requests
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, filters
)

API_URL = "http://127.0.0.1:8001/api"
TELEGRAM_TOKEN = "7616303667:AAHPCOv8amGVMvGIaNkRulM1CUCbtEc1rz0"

LOGIN_USERNAME, LOGIN_PASSWORD, ADD_TYPE, ADD_DURATION, ADD_FOOD_NAME, ADD_FOOD_CAL, \
EDIT_WO_ID, EDIT_WO_INPUT, EDIT_FOOD_ID, EDIT_FOOD_INPUT, DEL_WO_ID, DEL_FOOD_ID = range(12)

MAIN_MENU_KB = ReplyKeyboardMarkup(
    [
        ["üèãÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", "ü•ó –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"],
        ["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç"],
        ["‚ùå –£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"],
        ["üìä –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç"]
    ],
    resize_keyboard=True
)
ACTION_KB = ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)

user_tokens = {}
logging.basicConfig(level=logging.INFO)


def headers(user_id):
    token = user_tokens.get(user_id, {}).get("access")
    return {"Authorization": f"Bearer {token}"} if token else {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ /login —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")


async def login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    return LOGIN_USERNAME


async def get_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['username'] = update.message.text
    await update.message.reply_text("–ü–∞—Ä–æ–ª—å:")
    return LOGIN_PASSWORD


async def get_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = context.user_data['username']
    password = update.message.text
    resp = requests.post(f"{API_URL}/auth/login/", json={"username": username, "password": password})
    if resp.status_code == 200:
        user_tokens[update.effective_user.id] = resp.json()
        await update.message.reply_text("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /menu")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞")
    return ConversationHandler.END


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=MAIN_MENU_KB)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=MAIN_MENU_KB)
    return ConversationHandler.END


async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    u = requests.get(f"{API_URL}/auth/me/", headers=headers(user_id)).json()
    w = requests.get(f"{API_URL}/workouts/", headers=headers(user_id)).json()
    n = requests.get(f"{API_URL}/nutrition/", headers=headers(user_id)).json()
    total_dur = sum(wi['duration'] for wi in w)
    total_cal = sum(fi['calories'] for fi in n)
    await update.message.reply_text(
        f"üìä {u['username']}:\n–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {len(w)} –Ω–∞ {total_dur} –º–∏–Ω\n–ü—Ä–æ–¥—É–∫—Ç–æ–≤: {len(n)} –Ω–∞ {total_cal} –∫–∫–∞–ª")


# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ===
async def add_workout(update, context):
    await update.message.reply_text("–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–ö–∞—Ä–¥–∏–æ, –°–∏–ª–æ–≤–∞—è...):", reply_markup=ACTION_KB)
    return ADD_TYPE


async def get_workout_type(update, context):
    context.user_data['type'] = update.message.text
    await update.message.reply_text("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω):", reply_markup=ACTION_KB)
    return ADD_DURATION


async def get_workout_duration(update, context):
    dur = update.message.text
    resp = requests.post(f"{API_URL}/workouts/", json={
        "workout_type": context.user_data['type'], "duration": dur
    }, headers=headers(update.effective_user.id))
    await update.message.reply_text("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ" if resp.status_code == 201 else "‚ùå –û—à–∏–±–∫–∞", reply_markup=MAIN_MENU_KB)
    return ConversationHandler.END


async def add_food(update, context):
    await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", reply_markup=ACTION_KB)
    return ADD_FOOD_NAME


async def get_food_name(update, context):
    context.user_data['food_name'] = update.message.text
    await update.message.reply_text("–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:", reply_markup=ACTION_KB)
    return ADD_FOOD_CAL


async def get_food_cal(update, context):
    resp = requests.post(f"{API_URL}/nutrition/", json={
        "name": context.user_data['food_name'], "calories": update.message.text
    }, headers=headers(update.effective_user.id))
    await update.message.reply_text("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ" if resp.status_code == 201 else "‚ùå –û—à–∏–±–∫–∞", reply_markup=MAIN_MENU_KB)
    return ConversationHandler.END


# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ ===
async def edit_workout(update, context):
    user_id = update.effective_user.id
    workouts = requests.get(f"{API_URL}/workouts/", headers=headers(user_id)).json()
    workout_list = "\n".join(f"{w['id']}: {w['workout_type']} {w['duration']} –º–∏–Ω" for w in workouts)
    await update.message.reply_text(f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n{workout_list}\n\n–í–≤–µ–¥–∏—Ç–µ ID, —Ç–∏–ø, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n–ü—Ä–∏–º–µ—Ä: 1, –ô–æ–≥–∞, 30", reply_markup=ACTION_KB)
    return EDIT_WO_INPUT


async def handle_edit_workout(update, context):
    try:
        workout_id, new_type, new_dur = map(str.strip, update.message.text.split(","))
        response = requests.patch(
            f"{API_URL}/workouts/{workout_id}/",
            json={"workout_type": new_type, "duration": new_dur},
            headers=headers(update.effective_user.id)
        )
        if response.status_code == 200:
            await update.message.reply_text("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=MAIN_MENU_KB)
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=MAIN_MENU_KB)
    except Exception:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 1, –ô–æ–≥–∞, 30", reply_markup=MAIN_MENU_KB)
    return ConversationHandler.END


async def edit_food(update, context):
    user_id = update.effective_user.id
    foods = requests.get(f"{API_URL}/nutrition/", headers=headers(user_id)).json()
    food_list = "\n".join(f"{f['id']}: {f['name']} {f['calories']} –∫–∫–∞–ª" for f in foods)
    await update.message.reply_text(f"–ü—Ä–æ–¥—É–∫—Ç—ã:\n{food_list}\n\n–í–≤–µ–¥–∏—Ç–µ ID, –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n–ü—Ä–∏–º–µ—Ä: 1, –Ø–±–ª–æ–∫–æ, 50", reply_markup=ACTION_KB)
    return EDIT_FOOD_INPUT


async def handle_edit_food(update, context):
    try:
        food_id, new_name, new_cal = map(str.strip, update.message.text.split(","))
        response = requests.patch(
            f"{API_URL}/nutrition/{food_id}/",
            json={"name": new_name, "calories": new_cal},
            headers=headers(update.effective_user.id)
        )
        if response.status_code == 200:
            await update.message.reply_text("‚úÖ –ü—Ä–æ–¥—É–∫—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=MAIN_MENU_KB)
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=MAIN_MENU_KB)
    except Exception:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 1, –Ø–±–ª–æ–∫–æ, 50", reply_markup=MAIN_MENU_KB)
    return ConversationHandler.END


async def delete_workout(update, context):
    user_id = update.effective_user.id
    workouts = requests.get(f"{API_URL}/workouts/", headers=headers(user_id)).json()
    workout_list = "\n".join(f"{w['id']}: {w['workout_type']} {w['duration']} –º–∏–Ω" for w in workouts)
    await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n{workout_list}\n\n–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=ACTION_KB)
    return DEL_WO_ID


async def handle_delete_workout(update, context):
    workout_id = update.message.text.strip()
    response = requests.delete(f"{API_URL}/workouts/{workout_id}/", headers=headers(update.effective_user.id))
    if response.status_code == 204:
        await update.message.reply_text("‚úÖ –£–¥–∞–ª–µ–Ω–æ.", reply_markup=MAIN_MENU_KB)
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=MAIN_MENU_KB)
    return ConversationHandler.END


async def delete_food(update, context):
    user_id = update.effective_user.id
    foods = requests.get(f"{API_URL}/nutrition/", headers=headers(user_id)).json()
    food_list = "\n".join(f"{f['id']}: {f['name']} {f['calories']} –∫–∫–∞–ª" for f in foods)
    await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:\n{food_list}\n\n–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=ACTION_KB)
    return DEL_FOOD_ID


async def handle_delete_food(update, context):
    food_id = update.message.text.strip()
    response = requests.delete(f"{API_URL}/nutrition/{food_id}/", headers=headers(update.effective_user.id))
    if response.status_code == 204:
        await update.message.reply_text("‚úÖ –£–¥–∞–ª–µ–Ω–æ.", reply_markup=MAIN_MENU_KB)
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=MAIN_MENU_KB)
    return ConversationHandler.END


if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("summary", summary))
    app.add_handler(CommandHandler("cancel", cancel))
    

    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("login", login)],
        states={
            LOGIN_USERNAME: [MessageHandler(filters.Regex("üîô –ù–∞–∑–∞–¥"), cancel),
                             MessageHandler(filters.TEXT & ~filters.COMMAND, get_username)],
            LOGIN_PASSWORD: [MessageHandler(filters.Regex("üîô –ù–∞–∑–∞–¥"), cancel),
                             MessageHandler(filters.TEXT & ~filters.COMMAND, get_password)],
        },
        fallbacks=[MessageHandler(filters.Regex("üîô –ù–∞–∑–∞–¥"), cancel)]
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üèãÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"), add_workout)],
        states={
            ADD_TYPE: [MessageHandler(filters.Regex("üîô –ù–∞–∑–∞–¥"), cancel),
                       MessageHandler(filters.TEXT & ~filters.COMMAND, get_workout_type)],
            ADD_DURATION: [MessageHandler(filters.Regex("üîô –ù–∞–∑–∞–¥"), cancel),
                           MessageHandler(filters.TEXT & ~filters.COMMAND, get_workout_duration)],
        },
        fallbacks=[]
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("ü•ó –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"), add_food)],
        states={
            ADD_FOOD_NAME: [MessageHandler(filters.Regex("üîô –ù–∞–∑–∞–¥"), cancel),
                            MessageHandler(filters.TEXT & ~filters.COMMAND, get_food_name)],
            ADD_FOOD_CAL: [MessageHandler(filters.Regex("üîô –ù–∞–∑–∞–¥"), cancel),
                           MessageHandler(filters.TEXT & ~filters.COMMAND, get_food_cal)],
        },
        fallbacks=[]
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"), edit_workout)],
        states={
            EDIT_WO_INPUT: [MessageHandler(filters.Regex("üîô –ù–∞–∑–∞–¥"), cancel),
                            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit_workout)]
        },
        fallbacks=[]
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç"), edit_food)],
        states={
            EDIT_FOOD_INPUT: [MessageHandler(filters.Regex("üîô –ù–∞–∑–∞–¥"), cancel),
                              MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit_food)]
        },
        fallbacks=[]
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("‚ùå –£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"), delete_workout)],
        states={
            DEL_WO_ID: [MessageHandler(filters.Regex("üîô –ù–∞–∑–∞–¥"), cancel),
                        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_delete_workout)]
        },
        fallbacks=[]
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"), delete_food)],
        states={
            DEL_FOOD_ID: [MessageHandler(filters.Regex("üîô –ù–∞–∑–∞–¥"), cancel),
                          MessageHandler(filters.TEXT & ~filters.COMMAND, handle_delete_food)]
        },
        fallbacks=[]
    ))

    app.add_handler(MessageHandler(filters.Regex("üìä –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç"), summary))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
